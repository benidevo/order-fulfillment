services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - order-network
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - order-network
    volumes:
      - kafka-data:/bitnami/kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  kafdrop:
    image: obsidiandynamics/kafdrop:4.1.0
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - JVM_OPTS=-Xms32M -Xmx64M
    depends_on:
      - kafka
    networks:
      - order-network

  command:
    build:
      context: .
      dockerfile: docker/command/dockerfile
    container_name: command-service
    env_file:
      - ./command/.env
    networks:
      - order-network
    volumes:
      - ./command:/app
      - ~/.m2:/root/.m2
    restart: unless-stopped
    depends_on:
      - kafka

  query:
    build:
      context: .
      dockerfile: docker/query/dockerfile
      target: dev
    container_name: query-service
    env_file:
      - ./query/.env
    networks:
      - order-network
    volumes:
      - ./query:/app
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    networks:
      - order-network
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    restart: unless-stopped

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: dockerfile
    container_name: nginx-gateway
    ports:
      - "8000:80"
    networks:
      - order-network
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/gateway.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - command
      - query
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  seed:
    image: golang:1.23-alpine
    container_name: seed
    volumes:
      - ./scripts/seed:/app
    working_dir: /app
    networks:
      - order-network
    depends_on:
      - command
      - query


networks:
  order-network:
    driver: bridge


volumes:
  zookeeper-data:
  kafka-data:
  mongodb-data:
